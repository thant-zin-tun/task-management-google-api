/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as SigninImport } from './routes/signin'
import { Route as TasksRouteImport } from './routes/tasks/route'
import { Route as IndexImport } from './routes/index'
import { Route as TasksIndexImport } from './routes/tasks/index'
import { Route as TasksIdImport } from './routes/tasks/$id'
import { Route as TasksUpdateIndexImport } from './routes/tasks/update/index'

// Create/Update Routes

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const SigninRoute = SigninImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => rootRoute,
} as any)

const TasksRouteRoute = TasksRouteImport.update({
  id: '/tasks',
  path: '/tasks',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TasksIndexRoute = TasksIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => TasksRouteRoute,
} as any)

const TasksIdRoute = TasksIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => TasksRouteRoute,
} as any)

const TasksUpdateIndexRoute = TasksUpdateIndexImport.update({
  id: '/update/',
  path: '/update/',
  getParentRoute: () => TasksRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/tasks': {
      id: '/tasks'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof TasksRouteImport
      parentRoute: typeof rootRoute
    }
    '/signin': {
      id: '/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/tasks/$id': {
      id: '/tasks/$id'
      path: '/$id'
      fullPath: '/tasks/$id'
      preLoaderRoute: typeof TasksIdImport
      parentRoute: typeof TasksRouteImport
    }
    '/tasks/': {
      id: '/tasks/'
      path: '/'
      fullPath: '/tasks/'
      preLoaderRoute: typeof TasksIndexImport
      parentRoute: typeof TasksRouteImport
    }
    '/tasks/update/': {
      id: '/tasks/update/'
      path: '/update'
      fullPath: '/tasks/update'
      preLoaderRoute: typeof TasksUpdateIndexImport
      parentRoute: typeof TasksRouteImport
    }
  }
}

// Create and export the route tree

interface TasksRouteRouteChildren {
  TasksIdRoute: typeof TasksIdRoute
  TasksIndexRoute: typeof TasksIndexRoute
  TasksUpdateIndexRoute: typeof TasksUpdateIndexRoute
}

const TasksRouteRouteChildren: TasksRouteRouteChildren = {
  TasksIdRoute: TasksIdRoute,
  TasksIndexRoute: TasksIndexRoute,
  TasksUpdateIndexRoute: TasksUpdateIndexRoute,
}

const TasksRouteRouteWithChildren = TasksRouteRoute._addFileChildren(
  TasksRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/tasks': typeof TasksRouteRouteWithChildren
  '/signin': typeof SigninRoute
  '/signup': typeof SignupRoute
  '/tasks/$id': typeof TasksIdRoute
  '/tasks/': typeof TasksIndexRoute
  '/tasks/update': typeof TasksUpdateIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/signin': typeof SigninRoute
  '/signup': typeof SignupRoute
  '/tasks/$id': typeof TasksIdRoute
  '/tasks': typeof TasksIndexRoute
  '/tasks/update': typeof TasksUpdateIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/tasks': typeof TasksRouteRouteWithChildren
  '/signin': typeof SigninRoute
  '/signup': typeof SignupRoute
  '/tasks/$id': typeof TasksIdRoute
  '/tasks/': typeof TasksIndexRoute
  '/tasks/update/': typeof TasksUpdateIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/tasks'
    | '/signin'
    | '/signup'
    | '/tasks/$id'
    | '/tasks/'
    | '/tasks/update'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/signin' | '/signup' | '/tasks/$id' | '/tasks' | '/tasks/update'
  id:
    | '__root__'
    | '/'
    | '/tasks'
    | '/signin'
    | '/signup'
    | '/tasks/$id'
    | '/tasks/'
    | '/tasks/update/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  TasksRouteRoute: typeof TasksRouteRouteWithChildren
  SigninRoute: typeof SigninRoute
  SignupRoute: typeof SignupRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  TasksRouteRoute: TasksRouteRouteWithChildren,
  SigninRoute: SigninRoute,
  SignupRoute: SignupRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/tasks",
        "/signin",
        "/signup"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/tasks": {
      "filePath": "tasks/route.tsx",
      "children": [
        "/tasks/$id",
        "/tasks/",
        "/tasks/update/"
      ]
    },
    "/signin": {
      "filePath": "signin.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/tasks/$id": {
      "filePath": "tasks/$id.tsx",
      "parent": "/tasks"
    },
    "/tasks/": {
      "filePath": "tasks/index.tsx",
      "parent": "/tasks"
    },
    "/tasks/update/": {
      "filePath": "tasks/update/index.tsx",
      "parent": "/tasks"
    }
  }
}
ROUTE_MANIFEST_END */
